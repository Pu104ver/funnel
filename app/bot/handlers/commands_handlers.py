from pyrogram import filters, Client
from pyrogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
)
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from app.database.db_connector import get_db
from app.database.models import User
from app.bot.keyboards import (
    get_services_keyboard,
    tarot_keyboard,
    horoscope_keyboard,
    fortune_keyboard,
    consultation_keyboard,
    zodiac_keyboard,
)
from app.bot.utils.functions import toggle_subscription, is_user_exists


def register_handlers(app: Client):
    pending_questions = {}

    @app.on_message(filters.command("start"))
    async def start(client, message: Message):
        async for db in get_db():
            db: AsyncSession
            user = await db.execute(
                select(User).filter(User.username == message.from_user.username)
            )
            user = user.scalars().first()

            if user is None:
                user = User(
                    username=message.from_user.username,
                    full_name=f"{message.from_user.first_name} {message.from_user.last_name}",
                )
                db.add(user)
                await db.commit()

                await message.reply_text(
                    f"üññ–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω."
                )

                return

            await message.reply_text(f"üññ–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!")

    @app.on_message(filters.command("help"))
    async def help_command(client: Client, message: Message):
        help_text = (
            "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É—Å–ª—É–≥–∏ (/services):\n"
            "üîÆ –ì–∞–¥–∞–Ω–∏–µ\n"
            "üåü –ì–æ—Ä–æ—Å–∫–æ–ø\n"
            "üÉè –ö–∞—Ä—Ç—ã –¢–∞—Ä–æ\n\n"
            "üì© –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É.\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ‚Äì /support"
            "\n\nP.S. –Ø –Ω–µ –∑–Ω–∞—é –∫–∞–∫–∏–µ-–∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–≤–∏–¥–µ—Ç—å –æ—Ç –º–µ–Ω—è —Ç—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–∏—Ö, –Ω–æ, –ø–æ–ª–∞–≥–∞—é, –≤–∞–º –≤—Å–µ –∂–µ —Å–∫–æ—Ä–µ–µ –∫–æ–¥ –º–æ–π –∏–Ω–µ—Ç–µ—Ä–µ—Å–µ–Ω, –Ω–µ–∂–µ–ª–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤. –†–∞–±–æ—Ç–∞—Ç—å —Å —Ç–∑ –≤ 4 —Å—Ç—Ä–æ—á–∫–∏ –¥–æ–≤–æ–ª—å–Ω–æ –Ω–µ–ø—Ä–æ—Å—Ç–æüòá"
        )

        await message.reply_text(help_text)

    @app.on_message(filters.command("support"))
    async def support_command(client: Client, message: Message):
        support_text = (
            "üÜò –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:\n"
            "üìß Email: support@example.com\n"
            "üí¨ Telegram: @support_bot\n\n"
            "–ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø–æ–º–æ—á—å –≤–∞–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!"
        )

        await message.reply_text(support_text)

    @app.on_message(filters.command("services"))
    async def services(client, message: Message):
        async for db in get_db():
            db: AsyncSession
            username = message.from_user.username
            if not await is_user_exists(username, db):
                await message.reply_text(
                    "ü§ñ –ü–æ–∂–∞–ª—É–∏ÃÜ—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–∏ÃÜ—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —É—Å–ª—É–≥–∞–º."
                )
                return

        keyboard = get_services_keyboard()

        await message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
            reply_markup=keyboard,
        )

    @app.on_message(filters.command("subscribe"))
    async def subscribe(client, message: Message):
        async for db in get_db():
            db: AsyncSession
            user = await is_user_exists(message.from_user.username, db)

            if not user:
                await message.reply_text(
                    "ü§ñ –ü–æ–∂–∞–ª—É–∏ÃÜ—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–∏ÃÜ—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —É—Å–ª—É–≥–∞–º."
                )
                return

            await message.reply_text(await toggle_subscription(user, db))

    @app.on_message(filters.command("set_zodiac"))
    async def send_zodiac_buttons(client: Client, message: Message):
        async for db in get_db():
            db: AsyncSession
            if not await is_user_exists(message.from_user.username, db):
                await message.reply_text(
                    "ü§ñ –ü–æ–∂–∞–ª—É–∏ÃÜ—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–∏ÃÜ—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞."
                )
                return

        keyboard = zodiac_keyboard()
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:", reply_markup=keyboard)

    @app.on_callback_query(
        filters.regex(
            r"zodiac_(aries|taurus|gemini|cancer|leo|virgo|libra|scorpio|sagittarius|capricorn|aquarius|pisces)"
        )
    )
    async def change_zodiac(client: Client, callback_query: CallbackQuery):
        zodiac_dict = {
            "zodiac_aries": "–û–≤–µ–Ω",
            "zodiac_taurus": "–¢–µ–ª–µ—Ü",
            "zodiac_gemini": "–ë–ª–∏–∑–Ω–µ—Ü—ã",
            "zodiac_cancer": "–†–∞–∫",
            "zodiac_leo": "–õ–µ–≤",
            "zodiac_virgo": "–î–µ–≤–∞",
            "zodiac_libra": "–í–µ—Å—ã",
            "zodiac_scorpio": "–°–∫–æ—Ä–ø–∏–æ–Ω",
            "zodiac_sagittarius": "–°—Ç—Ä–µ–ª–µ—Ü",
            "zodiac_capricorn": "–ö–æ–∑–µ—Ä–æ–≥",
            "zodiac_aquarius": "–í–æ–¥–æ–ª–µ–π",
            "zodiac_pisces": "–†—ã–±—ã",
        }

        username = callback_query.from_user.username
        zodiac_sign = callback_query.data

        async for db in get_db():
            db: AsyncSession
            user = await is_user_exists(username, db)

            if user:
                user.zodiac_sign = zodiac_sign.removeprefix("zodiac_")
                await db.commit()
                await callback_query.answer(
                    f"–í–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {zodiac_dict[zodiac_sign]}."
                )
                await callback_query.message.edit_text(
                    f"–í–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {zodiac_dict[zodiac_sign]}."
                )
            else:
                await callback_query.answer("ü§ñ –ü–æ–∂–∞–ª—É–∏ÃÜ—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–∏ÃÜ—Ç–µ—Å—å.")

    @app.on_callback_query(filters.regex("ask_question"))
    async def ask_question_callback(client: Client, callback_query: CallbackQuery):
        async for db in get_db():
            db: AsyncSession
            if not await is_user_exists(callback_query.from_user.username, db):
                await callback_query.answer(
                    "ü§ñ –ü–æ–∂–∞–ª—É–∏ÃÜ—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–∏ÃÜ—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —É—Å–ª—É–≥–∞–º."
                )
                return

        chat_id = callback_query.message.chat.id

        await callback_query.answer("üí¨–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç–µ.‚¨áÔ∏è")
        await callback_query.message.edit_text(
            "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É."
        )
        pending_questions[chat_id] = True

    @app.on_message(filters.text & filters.private)
    async def handle_question(client: Client, message: Message):
        chat_id = message.chat.id

        if chat_id in pending_questions:
            user_question = message.text

            del pending_questions[chat_id]  # –£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è

            await message.reply_text(
                f"–í–∞—à –≤–æ–ø—Ä–æ—Å: '{user_question}' –∑–∞–ø–∏—Å–∞–Ω!‚úçÔ∏è –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.üó£Ô∏è"
            )

    @app.on_callback_query(filters.regex("consultation"))
    async def consultation_callback(client: Client, callback_query: CallbackQuery):
        async for db in get_db():
            db: AsyncSession
            if not await is_user_exists(callback_query.from_user.username, db):
                await callback_query.answer(
                    "ü§ñ –ü–æ–∂–∞–ª—É–∏ÃÜ—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–∏ÃÜ—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —É—Å–ª—É–≥–∞–º."
                )
                return

        response_text = (
            "–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å‚¨áÔ∏è:"
        )
        keyboard = consultation_keyboard()
        await callback_query.message.edit_text(response_text, reply_markup=keyboard)
        await callback_query.answer()

    @app.on_callback_query(filters.regex("fortune_yes"))
    async def fortune_yes_callback(client: Client, callback_query: CallbackQuery):
        await callback_query.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–∞–¥–∞–Ω–∏–µ!")
        await callback_query.message.edit_text("–í–∞—à–µ –≥–∞–¥–∞–Ω–∏–µ: –°–∫–æ—Ä–æ –±—É–¥–µ—Ç —É–¥–∞—á–∞!‚ú®‚ú®‚ú®")

        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≥–∞–¥–∞–Ω–∏—è (–º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—é–¥–∞ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–∞–¥–∞–Ω–∏—è)

    @app.on_callback_query(filters.regex("horoscope_yes"))
    async def horoscope_yes_callback(client: Client, callback_query: CallbackQuery):
        await callback_query.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ—Å–∫–æ–ø!")
        await callback_query.message.edit_text(
            "–í–∞—à –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –∫ –¥–µ—Ç–∞–ª—è–º.ü§ì"
        )

        # –¢—É—Ç —Ç–æ–∂–µ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∞–ø–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é

    @app.on_callback_query(filters.regex("tarot_yes"))
    async def tarot_yes_callback(client: Client, callback_query: CallbackQuery):
        await callback_query.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –¢–∞—Ä–æ!")
        await callback_query.message.edit_text(
            "–í–∞—à —Ä–∞—Å–∫–ª–∞–¥ –Ω–∞ –¢–∞—Ä–æ: –ö–∞—Ä—Ç–∞ –¥–Ω—è ‚Äî –ò–º–ø–µ—Ä–∞—Ç–æ—Ä.ü´Ö"
        )

        # –õ–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞ –¢–∞—Ä–æ

    @app.on_callback_query(
        filters.regex("fortune") | filters.regex("horoscope") | filters.regex("tarot"),
    )
    async def handle_service(client: Client, callback_query: CallbackQuery):
        response_text: str = ""
        keyboard: InlineKeyboardMarkup = None

        if callback_query.data == "fortune":
            response_text = "–í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Å–ª—É–≥—É –≥–∞–¥–∞–Ω–∏—è. –•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç—å –≥–∞–¥–∞–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?üîÆ"
            keyboard = fortune_keyboard()

        elif callback_query.data == "horoscope":
            response_text = (
                "–í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Å–ª—É–≥—É –≥–æ—Ä–æ—Å–∫–æ–ø–∞. –•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è?üåÉ"
            )
            keyboard = horoscope_keyboard()

        elif callback_query.data == "tarot":
            response_text = "–í—ã –≤—ã–±—Ä–∞–ª–∏ –¢–∞—Ä–æ. –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ä–∞—Å–∫–ª–∞–¥?üÉè"
            keyboard = tarot_keyboard()

        await callback_query.message.edit_text(response_text, reply_markup=keyboard)
        await callback_query.answer()
